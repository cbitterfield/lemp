#!/bin/bash

MYNAME=$(hostname)
printf 'Starting node %s' "${MYNAME}"



#CONSTANTS
VARLIST="LOG_STDOUT LOG_LEVEL MYSQL_DATABASE MYSQL_USER MYSQL_USER_PASS MYSQL_ROOT_PASS SITE_PASS SSH_PUBLIC PADMIN_USER PADMIN_PASS"
# Functions
function exportBoolean {
    if [ "${!1}" = "**Boolean**" ]; then
            unset "${1}"
    else 
            export "${1}"='True'
    fi
}

function checkDefaults {
    if [ "${!1}" = "**notdefined**" ]; then
            unset "${1}"
    fi
}

# Test Variables and set accordingly
# This will unset all undefined variables.
for var in $VARLIST; do
  checkDefaults "$var"
done



# Check if TLS is enabled. Unset if not
exportBoolean TLS


# Set Variables based on defaults and passed variables. Not all will be used
export SQL_DATABASE=${MYSQL_DATABASE:-default_lemp}
export SQL_PASSWORD=${MYSQL_USER_PASS:-$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c"${1:-8}";echo)}
export SQL_USER=${MYSQL_USER:-lemp}
export SQL_ROOT_PASSWORD=${MYSQL_ROOT_PASS:-$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c"${1:-8}";echo)}
export SITE_PASS=${SITE_PASS:-$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c"${1:-8}";echo)}
export PADMIN_PASS=${PADMIN_PASS:-$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c"${1:-8}";echo)}
export PADMIN_PASS=${PADMIN_USER:-padmin}
export LOG_LEVEL=${LOG_LEVEL:-critical}
TCOLS="$(tput cols)"
export TCOLS
FCOLS="$(( TCOLS - 22))"
export FCOLS




#  Start First Run
IS_CONFIGURED='/data/is_configured'
if [ ! -f "$IS_CONFIGURED" ]; then 
# Update the OS and all packages
apt-get update
apt-get upgrade -y
apt autoremove -y

printf 'Configuring system for first use'
printf 'Passwords are set on first run only'
printf  '%s\n%s\n' "${SITE_PASS?}" "${SITE_PASS?}" | passwd dev_site
printf 'Linux user [dev_site] password is set to [%s]' "${SITE_PASS} " > /dev/stdout


#Copy all of the files over from _data to the new volume data
(cd /.data || exit; find . -depth -print | cpio -pdm /data)

#Update PHP.ini configuration
# Set PHP timezone
/bin/sed -i "s/\;date\.timezone\ \=/date\.timezone\ \=\ ${DATE_TIMEZONE}/" /etc/php/7.2/fpm/php.ini
# enable php short tags:
/bin/sed -i "s/short_open_tag\ \=\ Off/short_open_tag\ \=\ On/g" /etc/php/7.2/fpm/php.ini


# Activate nginx sites (default and dev_site)
cd /data/conf/nginx/sites-available/ || exit
sed -i.bak "s/__SERVERNAME__/${WEBSITE}/" /data/conf/nginx/sites-available/dev_site.conf && rm dev_site.conf.bak
sed -i.bak "s/__SERVERNAME__/${WEBSITE}/" /data/conf/nginx/sites-available/dev_site_tls.conf && rm dev_site_tls.conf.bak
ln -s /data/conf/nginx/sites-available/default_site.conf /data/conf/nginx/sites-enabled/
ln -s /data/conf/nginx/sites-available/dev_site.conf /data/conf/nginx/sites-enabled/

# Customize the index.php file for database parameters
cd /data/html/ || exit
sed -i.bak "s/__sqldatabase__/${SQL_DATABASE}/" /data/html/index.php && rm index.php.bak
sed -i.bak "s/__sqlusername__/${SQL_USER}/"     /data/html/index.php && rm index.php.bak
sed -i.bak "s/__sqlpassword__/${SQL_PASSWORD}/" /data/html/index.php && rm index.php.bak

# If TLS enabled, generate a key and activate the website with SSL
if [ "$TLS" ]; then
# Creat default SSL certificate demo site
openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /data/conf/nginx/tls/"$WEBSITE".key -out /data/conf/nginx/tls/"$WEBSITE".crt -subj "/C=US/ST=California/L=Webapps/O=Development, Inc./OU=IT/CN=$WEBSITE"
openssl dhparam -out /data/conf/nginx/tls/dhparam.pem 2048
ln -s /data/conf/nginx/sites-available/dev_site_tls.conf /data/conf/nginx/sites-enabled/
echo "Replace the self-signed certificates with real ones if you need to"
echo "Certbot is installed for automating this"
fi



# Create and error configuration file for nginx
echo -e "\terror_log /data/logs/nginx/nginx_error.log debug;" > /data/conf/nginx/conf.d/error_nginx.conf
echo -e "\terror_log /data/logs/nginx/default_error.log debug;" > /data/conf/nginx/conf.d/error_default.conf
echo -e "\terror_log /data/logs/nginx/dev_site.error.log debug;" > /data/conf/nginx/conf.d/error_dev.conf

echo "Creating MySQL Database and setting user/password and root password"
echo "Initializing mysql database"
/usr/bin/mysql_install_db > /dev/null
service mysql start
/usr/bin/mysqladmin create "$SQL_DATABASE"

cat << SETUP > /tmp/mysql_setup.sql
	use mysql;
    CREATE USER $SQL_USER@'%' IDENTIFIED BY "$SQL_PASSWORD";
    GRANT ALL PRIVILEGES ON $SQL_DATABASE . * TO $SQL_USER@'%' ;
    CREATE USER $SQL_USER@'localhost' IDENTIFIED BY "$SQL_PASSWORD";
    GRANT ALL PRIVILEGES ON $SQL_DATABASE . * TO $SQL_USER@'localhost' ;
    CREATE USER $SQL_USER@'$HOSTNAME' IDENTIFIED BY "$SQL_PASSWORD";
    GRANT ALL PRIVILEGES ON $SQL_DATABASE . * TO $SQL_USER@'$HOSTNAME' ; 
    CREATE USER '$PADMIN_USER'@'localhost' IDENTIFIED BY '$PADMIN_PASS';
    GRANT ALL PRIVILEGES ON *.* TO 'padmin'@'localhost' WITH GRANT OPTION;
    delete from user where user='';     
    SET PASSWORD FOR 'root'@'$HOSTNAME' = PASSWORD("$SQL_ROOT_PASSWORD");
    SET PASSWORD FOR 'root'@'localhost' = PASSWORD("$SQL_ROOT_PASSWORD");
    FLUSH PRIVILEGES;
SETUP

mysql -u root mysql < /tmp/mysql_setup.sql
rm /tmp/mysql_setup.sql

if [ "$SSH_PUBLIC" ]; then
	mkdir ~dev_site/.ssh
	echo "$SSH_PUBLIC" > ~dev_site/.ssh/authorized_keys
	chown -R dev_site:dev_site  ~dev_site/.ssh
	chmod go-w ~dev_site/
	chmod 700 ~dev_site/.ssh
	chmod 600 ~dev_site/.ssh/authorized_keys

fi

#Send info to user directory just in case
(echo "Starting docker: $MYNAME" ;
echo "website name set to [$WEBSITE]" ;
echo "dev_site password is set to [$SITE_PASS]";
echo "database name set to [$SQL_DATABASE]" ;
echo "database user set to [$SQL_USER]" ;
echo "database password set to [$SQL_PASSWORD]" ;
echo "database root password is set to [$SQL_ROOT_PASSWORD]") > ~dev_site/setup.txt



cat << EOB > /dev/stdout
    
    ****************************************************************
    *                                                              *
    *    Docker image: cbitterfield/lemp-ubuntu18-04               *
    *    GitHub:https://github.com/cbitterfield/lemp-ubuntu18-04   *
    *                                                              *
    ****************************************************************

    CONTAINER SETTINGS
    ---------------
    · Please refer to READ.md for detailed instructions
    · Supports changing LOG_LEVEL for NGINX
    · Supports TLS on or off
    · PHP date timezone [DATE_TIMEZONE]: $DATE_TIMEZONE
    · Allows for SSH and SFTP access (and Key based access)
    · Allows custom MySQL database and user
    · Allow override on NGINX via ./conf.d
    	files that start with pre_http_* are loaded before that block
    	files that start with http_* are loaded at the end of the standard block
    · Allows for port redirection on 22,80,443, and 3306
    · Allows local host volume or docker volume for persistane
    · Included service start/stop and other useful choices (see github)
	
EOB

# Send this info to stdout last for easier readability
echo "****************************************************************"
echo "Configuring passwords on first run"
echo "database user set to [$SQL_USER]" > /dev/stdout
echo "database password set to [$SQL_PASSWORD]" > /dev/stdout
echo "database root password is set to [$SQL_ROOT_PASSWORD]" > /dev/stdout
echo "Linux user [dev_site] password is set to [$SITE_PASS]" > /dev/stdout
touch /data/is_configured

# Add clearing any password variables on to path
echo  "unset SITE_PASS MYSQL_USER_PASS MYSQL_ROOT_PASS SSH_PUBLIC " > /etc/profile.d/10-clear-passwords.sh
echo  "unset SITE_PASS MYSQL_USER_PASS MYSQL_ROOT_PASS SSH_PUBLIC " >> /root/.profile
echo  "unset SITE_PASS MYSQL_USER_PASS MYSQL_ROOT_PASS SSH_PUBLIC " >> /root/.bashrc

# Configure PHPMYADMIN
cd /etc/phpmyadmin
openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /data/conf/nginx/tls/phpmyadmin.local.key -out /data/conf/nginx/tls/phpmyadmin.local.crt -subj "/C=US/ST=California/L=Webapps/O=Development, Inc./OU=IT/CN=phpmyadmin.local"
sed -i.bak "s/__database__/${DATABASE}/" /etc/phpmyadmin/config-db.php && rm config-db.php.bak
sed -i.bak "s/__admin_user__/${PADMIN_USER}/" /etc/phpmyadmin/config-db.php && rm config-db.php.bak
sed -i.bak "s/__database__/${PADMIN_PASS}/" /etc/phpmyadmin/config-db.php && rm config-db.php.bak
ln -s /data/conf/nginx/sites-available/phpmyadmin_tls.conf /data/conf/nginx/sites-enabled/

# end first run work
fi

echo "Starting docker: $MYNAME" > /dev/stdout
echo "website name set to [$WEBSITE]" > /dev/stdout
echo "database name set to [$SQL_DATABASE]" > /dev/stdout
echo "database user set to [$SQL_USER]" > /dev/stdout

# Start Services required
service postfix start
service ssh start
if service php7.2-fpm start;
then
   printf ' * php-fpm started%*s\n' "$FCOLS" "[ OK ]" > /dev/stdout
fi
service nginx start

if ! pgrep -f mysql > /dev/null;
then
	echo 'MySQL is already running'
else
    service mysql start
fi


if  test -f "$LOG_STDOUT";
then
	tail -f LOG_STDOUT > /dev/stdout
fi



# Unset all password variables:
unset SITE_PASS MYSQL_USER_PASS MYSQL_ROOT_PASS SSH_PUBLIC

#if the container is stopped and started we will not be able to redirect so we need this
# statement to keep it running
while true; do
    sleep 360
done
